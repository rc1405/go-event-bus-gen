package {{ .Package }}

import (
	"context"
	"fmt"
	"io"
	"os"
	"sync"

	"github.com/rs/zerolog"
	{{ range $i, $v := .Imports}}"{{ $v }}"{{ end }}
)

{{ range $i, $e := .Enums }}
type {{ $e.Name }}Enum int32
const (
	{{ range $x, $m := $e.Members }}
	{{ $m.Name | ToUpper }} {{ $e.Name }}Enum = {{ $m.Index }}{{ end }}
)

{{ end }}


{{ range $i, $s := .Structs }}
type {{ $s.Name }} struct {
{{ range $i, $a := $s.Attributes }}
    {{ $a.Name }} {{ if $a.Repeated }}[]{{ end }}{{ $a.Type }} `json:"{{ $a.RawName }}{{ if $a.Optional }},omitempty{{ end }}"`{{ end }}
}

{{ end }}


type Service interface {
{{ range $i, $m := .Methods }}{{ if ProcessedMethods $m.Name }}{{ continue }}{{ else }}
    {{ $m.Name }}({{ $m.Input }}) {{ if $m.HasOutput }}({{ $m.Output }}, error){{ else }}error{{ end }}{{ end }}{{ end }}
}


type Event struct {
	Type string
	Data any
}

type EventBus struct {
	subscribers map[string][]chan<- Event
	ready       chan struct{}
	exitOnError bool
	logger      zerolog.Logger
	lock        sync.RWMutex
	Workers     int
}

type Options struct {
	LogLevel *zerolog.Level
	Strict   *bool
	Output   io.Writer
	Workers  int
}

/**
Creates a new EventBus with the provided options.

Parameters:
- opts: Variadic functions to set options for the EventBus.

Returns:
- A pointer to the newly created EventBus.
*/
func NewEventBus(opts ...func(*Options)) *EventBus {
	var options Options
	for _, fn := range opts {
		fn(&options)
	}

	var loggerOutput io.Writer
	switch options.Output {
	case nil:
		loggerOutput = os.Stdout
	default:
		loggerOutput = options.Output
	}

	var logLevel zerolog.Level
	switch options.LogLevel {
	case nil:
		logLevel = zerolog.InfoLevel
	default:
		logLevel = *options.LogLevel
	}

	var exitOnError bool
	switch options.Strict {
	case nil:
	default:
		exitOnError = *options.Strict
	}

	var workers = 1
	switch options.Workers {
	case 0:
	default:
		workers = options.Workers
	}

	logger := zerolog.New(loggerOutput).With().Timestamp().Logger()
	zerolog.SetGlobalLevel(logLevel)

	return &EventBus{
		subscribers: make(map[string][]chan<- Event),
		ready:       make(chan struct{}),
		exitOnError: exitOnError,
		logger:      logger,
		Workers:     workers,
	}
}

func (e *EventBus) Subscribe(eventType string, subscriber chan<- Event) {
	e.logger.Trace().Msgf("received subscriber for %s", eventType)
	e.lock.Lock()
	e.subscribers[eventType] = append(e.subscribers[eventType], subscriber)
	e.lock.Unlock()
}

/**
* Ready waits until the EventBus is ready to process events.
*/
func (e *EventBus) Ready() {
	<- e.ready
}

/**
Publish sends the provided data to all subscribers of the EventBus.

Parameters:
- data: The data to be published.

Returns:
- An error if the provided data type is not recognized.
*/
func (e *EventBus) Publish(data any) error {
	e.logger.Trace().Interface("event", data).Msg("publishing event")
	event := Event{
		Data:      data,
	}

	switch data.(type) { {{ range $i, $s := .Methods }}{{ if ProcessedInputs $s.Input }}{{ continue }}{{ else }}
    case {{ $s.Input }}:
		event.Type = "{{ $s.Input }}"{{ end }}{{ end }}
	default:
		return fmt.Errorf("invalid type provided")
	}

	e.lock.RLock()
	subscribers := e.subscribers[event.Type]
	e.lock.RUnlock()
	for _, subscriber := range subscribers {
		subscriber <- event
	}

	return nil
}

/**
 * Run executes the event bus by subscribing to specific events and handling them accordingly.
 * It manages the event processing flow, error handling, and cleanup operations.
 * 
 * Parameters:
 * - ctx: the context in which the event bus runs
 * - server: the service that processes the events
 * 
 * Returns an error if any issue occurs during event processing or cleanup.
 */
func (e *EventBus) Run(ctx context.Context, server Service) error {
	var wg sync.WaitGroup
	ctx2, cancel := context.WithCancel(ctx)
	defer cancel()
	errChan := make(chan error)
{{ range $i, $m := .Methods }}
    c{{ $i }} := make(chan Event)
    e.Subscribe("{{ $m.Input }}", c{{ $i }}){{ end }}

	for i := 0; i <= e.Workers; i++ { {{ range $i, $m := .Methods }}
		wg.Add(1)
		go func(c chan Event) {
			defer wg.Done()
		L:
			for {
				select {
				case <-ctx2.Done():
					return
				case event, ok := <-c:
					if !ok {
						continue L
					}
					e.logger.Debug().Interface("event", event.Data).Interface("event_type", event.Type).Msg("event received")
					msg, ok := event.Data.({{ $m.Input }})
					if !ok {
						errChan <- fmt.Errorf("received invalid event type")
						continue L
					}

					{{ if $m.HasOutput }}
					out, err := server.{{ $m.Name }}(msg)
					if err != nil {
						errChan <- err
						continue L
					}

					if err := e.Publish(out); err != nil {
						errChan <- err
						continue L
					}
					{{ else }}
					if err := server.{{ $m.Name }}(msg); err != nil {
						errChan <- err
						continue L
					}
					{{ end }}
				}
			}
		}(c{{ $i }})
	{{ end }} }	

	close(e.ready)
L:
	for {
		select {
		case <-ctx.Done():
			cancel()
			break L
		case err := <-errChan:
			if err != nil {
				e.logger.Error().Err(err).Interface("exit_on_error", e.exitOnError).Msg("received error from handlers")
				if e.exitOnError {
					cancel()
					return err
				}
			}
		}
	}
    wg.Wait()
    return nil
}